/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sdp.prac2;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import java.util.*;

class SimpleFunctionsTest {

    @Test 
    public void testTask2(){
        // Arrange 
        List<String> input1 = Arrays.asList("Testing", "one", "two"); 
        List<String> output1 = Arrays.asList("esting", "ne", "wo"); 
        List<String> input2 = Arrays.asList("No", "character", "", "case"); 
        List<String> output2 = Arrays.asList("o", "haracter", "ase"); 
        List<String> input3 = Arrays.asList("The", "case", "for", "spaces...", "   "); 
        List<String> output3 = Arrays.asList("he", "ase", "or", "paces", "  "); 

        // Act 
        List<String> runner1 = SimpleFunctions.Task2(input1); 
        List<String> runner2 = SimpleFunctions.Task2(input2); 
        List<String> runner3 = SimpleFunctions.Task2(input3); 

        // Assertion 
        assertEquals(runner1,output1); 
        assertEquals(runner2, output2); 
        assertEquals(runner3, output3);
    } 

    @Test
    public static void testTask3_NestedBrackets() {
        String input = "(())";
        boolean result = SimpleFunctions.Task3(input);
        assertTrue(result);
        String input1 = "(()";
        boolean result1 = SimpleFunctions.Task3(input1);
        assertFalse(result1);
    }
    
    @Test 
    public void testTask4_DifferentSizeLists() {
        List<Integer> x = Arrays.asList(1,2,3);
        List<Integer> y = Arrays.asList(4,5);
        
        List<Integer> answer = SimpleFunctions.Task4(x,y);
        
        assertNull(answer);
    }

    @Test 
    public void testTask4_BasicFunctionality() {
        List<Integer> x = Arrays.asList(1,2,3);
        List<Integer> y = Arrays.asList(4,5,6);
        List<Integer> expected = Arrays.asList(6,10,12);
        
        List<Integer> answer = SimpleFunctions.Task4(x,y);
        
        assertEquals(expected,answer);
    }


   //Tests for Task5
   @Test void isEmptyListConsideredSorted() {
        List<Integer> input = Collections.emptyList();
        boolean result = SimpleFunctions.Task5(input);
        assertTrue(result);
    }

        //Act
        // boolean res1 = classBeingTested.Task5(lst1);
        // boolean res2 = classBeingTested.Task5(lst2);
        // boolean res3 = classBeingTested.Task5(lst3);
        // boolean res4 = classBeingTested.Task5(lst4);
        // boolean res5 = classBeingTested.Task5(lst5);

        // //Assert
        // assertEquals(true, res1);
        // assertEquals(true, res2);
        // assertEquals(false, res3);
        // assertEquals(true, res4);
        // assertEquals(false, res5);

    @Test void sortedNumbersListReturnsTrue() {
        List<Integer> input = Arrays.asList(0, 0, 7);
        boolean result = SimpleFunctions.Task5(input);
        assertTrue(result);
    }

    @Test void unsortedListReturnsFalse() {
        List<Integer> input = Arrays.asList(3, 1, 3);
        boolean result = SimpleFunctions.Task5(input);
        assertFalse(result);

    }

    @Test void TestTask1(){
        // Arrange
        SimpleFunctions classBeingTested = new SimpleFunctions();
        Random r = new Random();
        List<Integer> nums1  = new ArrayList<>();
        for (int i = 0; i<10;i++){
            nums1.add(r.nextInt(50));
        }
        List<Integer> idx1  = new ArrayList<>();
        for (int i = 0; i<10;i++){
            idx1.add(r.nextInt(15));
        }
        List<Integer> nums2  = new ArrayList<>();
        for (int i = 0; i<10;i++){
            nums2.add(r.nextInt(50));
        }
        List<Integer> idx2  = new ArrayList<>();
        for (int i = 0; i<10;i++){
            idx2.add(r.nextInt(15));
        }
        int sum1 = 0;
        int sum2 = 0;
        for (int n: idx1){
            if (n<nums1.size()){
                sum1 += nums1.get(n);
            }
        }

        for (int n: idx2){
            if (n<nums2.size()){
                sum2 += nums2.get(n);
            }
        }

        //Act
        int res1 = classBeingTested.Task1(nums1, idx1);
        int res2 = classBeingTested.Task1(nums2, idx2);

        // Assert
        assertEquals(sum1,res1);
        assertEquals(sum2,res2);
        
    }


}